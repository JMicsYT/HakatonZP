// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  USER
  ADMIN
}

enum StoryStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  stories       Story[]
  accounts      Account[]
  sessions      Session[]
  moderatedStories Story[] @relation("moderator")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Story {
  id           String      @id @default(cuid())
  title        String
  fullName     String
  birthDate    DateTime?
  deathDate    DateTime?
  rank         String?
  militaryUnit String?
  awards       String?
  content      String      @db.Text
  status       StoryStatus @default(DRAFT)
  published    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  authorId     String
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images       Image[]
  videoUrl     String?
  audioUrl     String?
  moderatorId  String?
  moderator    User?       @relation("moderator", fields: [moderatorId], references: [id])
  moderationComment String? @db.Text
  moderatedAt  DateTime?

  @@index([authorId])
  @@index([moderatorId])
  @@index([status])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([storyId])
}
